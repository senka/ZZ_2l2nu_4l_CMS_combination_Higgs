/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "HiggsAnalysis/CombinedLimit/interface/RooATGCFunction_wz.h" 

#include <math.h> 
#include "TMath.h" 

#include "TFile.h"

#include "RooFormulaVar.h"
#include "RooRealVar.h"
#include "RooFit.h"



ClassImpUnique(RooATGCFunction_wz,MAGICWORDOFSOMESORT_wz) 

RooATGCFunction_wz::RooATGCFunction_wz() : 
  P_dk(0), P_dg1(0)
{
  initializeProfiles();
}

RooATGCFunction_wz::RooATGCFunction_wz(const char *name, const char *title, 
                                 RooAbsReal& _x,
                                 RooAbsReal& _lZ,
                                 RooAbsReal& _dkg,
                                 RooAbsReal& _dg1,
                                 const char * parFilename) :
   RooAbsReal(name,title), 
   x("x","x",this,_x),
   lZ("lZ","lZ",this,_lZ),
   dkg("dkg","dkg",this,_dkg),
   dg1("dg1","dg1",this,_dg1),
   profileFilename(parFilename),
   P_dk(0), P_dg1(0)
{ 
  initializeProfiles();
  //here
  initializeBins(_x);
  const char* pwd = gDirectory->GetPath();
  TFile *f = TFile::Open(parFilename,"READ");  
  gDirectory->cd(pwd);
  std::cout << "@@@@@@@@ opened the input file!" << std::endl;
  std::vector<double> bins_;

  
  const RooRealVar& rdep = dynamic_cast<const RooRealVar&>(_x);
  int N_bins=rdep.getBinning("").numBins();
  
  std::cout << "1 N_bins= "<< N_bins << std::endl;


  //    int N_bins=RooRealVar(_x).getBinning("").numBins();
  //  _x.setBins(5);

  for (int i=0;i<N_bins;i++){
    if (i==0){
      bins_.push_back(rdep.getBinning("").binLow(i));
      cout <<i <<" bins: "<< rdep.getBinning("").binLow(i) << endl;
    }
    bins_.push_back(rdep.getBinning("").binHigh(i));
    cout <<i <<" bins: "<< rdep.getBinning("").binHigh(i) << endl;
  }

  readProfiles(bins_,*f);
  std::cout << "read profiles!" << std::endl;
  f->Close();
} 

RooATGCFunction_wz::RooATGCFunction_wz(const RooATGCFunction_wz& other, 
                                 const char* name) :  
  RooAbsReal(other,name), 
  //  x("x",this,other.x),
  lZ("lZ",this,other.lZ),
  dkg("dkg",this,other.dkg),
  dg1("dg1",this,other.dg1),
  bins(other.bins),
  profileFilename(other.profileFilename),
  P_dk(0), P_dg1(0)
{ 
  initializeProfiles();

  initializeProfiles();
  const char* pwd = gDirectory->GetPath();
  TFile *f = TFile::Open(profileFilename,"READ");  
  gDirectory->cd(pwd);  
  readProfiles(bins,*f);
  f->Close();
} 

void RooATGCFunction_wz::initializeProfiles() {
  int const N_bins=20;
  std::cout << "2 N_bins= "<< N_bins << std::endl;
  P_dk = new TH2D*[N_bins]();
  P_dg1 = new TH2D*[N_bins]();
}

void RooATGCFunction_wz::initializeBins(const RooAbsReal& dep){
  const RooRealVar& rdep = dynamic_cast<const RooRealVar&>(dep);
  bool bin_true=rdep.hasBinning("");
  if (!bin_true)
    cout <<"\t @@@@@@@@@@@ can't find biining! (RooATGCProcessScaling file)" << endl;
  int N_bins=rdep.getBinning("").numBins();
  std::cout << "4 N_bins= "<< N_bins << std::endl;
  for(int i=0; i<N_bins; ++i) {
    int bin_low=rdep.getBinning("").binLow(i);
    int bin_high=rdep.getBinning("").binHigh(i);   
    //    int N_bins=rdep.getBinning("").numBins();
    if (i==0){
      bins.push_back(bin_low);
      cout <<i <<" \t\t first bin: filling bin in vector "<<bin_low <<endl;
    }
    //    else{
      bins.push_back(bin_high);
      cout <<i <<" \t\t filling bin in vector "<<bin_high <<endl;
      //    }
  }
}


void RooATGCFunction_wz::readProfiles(std::vector<double> bins, TDirectory& dir) const {

  /*
int const N_bins=15;
int const bins_first=200.;
int const bins_last=800.;
double bin_width=(bins_last-bins_first)/N_bins;
  */

  int const N_bins=bins.size()-1;
  std::cout << "5 N_bins= "<< N_bins << std::endl;
   
  int i;
  for(i=0; i<N_bins; ++i) {
    /*
    int bin_low=bins_first+(i*bin_width);
    int bin_high=bins_first+(i+1)*bin_width;
    */

    //    int bin_low=bins[i];
    // int bin_high=bins[i+1];

    if (P_dk[i]) delete P_dk[i];
    //    TString dkname = TString::Format("p%i_lambda_dkg", i);
    //    TString dkname = TString::Format("bin_content_lam_dk_%i_%ito%iGeV",i+1,bin_low,bin_high);
    TString dkname = TString::Format("bin_content_lam_dk_%i",i+1);
    cout <<"trying to get: "<<dkname << endl;
    P_dk[i] = dynamic_cast<TH2D *>(dir.Get(dkname)->Clone(dkname+"new"));
    P_dk[i]->SetDirectory(0);
    if (P_dg1[i]) delete P_dg1[i];
    //    TString dg1name = TString::Format("p%i_lambda_dg1", i);
    //    TString dg1name = TString::Format("bin_content_lam_dg_%i_%ito%iGeV",i+1,bin_low,bin_high);
    TString dg1name = TString::Format("bin_content_lam_dg_%i",i+1);
    P_dg1[i] = dynamic_cast<TH2D *>(dir.Get(dg1name)->Clone(dg1name+"new"));
    P_dg1[i]->SetDirectory(0);
  }

  // for (i=0; i<=6; i++) {
  //   std::cout << 'P' << i << "_dk " << P_dk[i]->GetName() << '\n';
  // }
}

void RooATGCFunction_wz::readProfiles(RooATGCFunction_wz const& other) {

  int N_bins=other.bins.size()-1;
  std::cout << "6 N_bins= "<< N_bins << std::endl;
  //  int N_bins=rdep.getBinning("").numBins();
  /*
int const N_bins=15;
int const bins_first=200.;
int const bins_last=800.;
double bin_width=(bins_last-bins_first)/N_bins;
  */
  for (int i = 0; i<N_bins; ++i) {
    //    int bin_low=bins[i];
    //    int bin_high=bins[i+1];
    /*
    int bin_low=bins_first+(i*bin_width);
    int bin_high=bins_first+(i+1)*bin_width;
    */
    std::cout << other.P_dk[i] << std::endl;
    std::cout << other.P_dg1[i] << std::endl;
    //    TString dkname = TString::Format("p%i_lambda_dkg", i);
    //    TString dkname = TString::Format("bin_content_lam_dk_%i_%ito%iGeV",i+1,bin_low,bin_high);
    TString dkname = TString::Format("bin_content_lam_dk_%i",i+1);
    cout <<"trying to get object: "<<dkname << endl;
    //    dir.ls();
    P_dk[i] = dynamic_cast<TH2D *>(other.P_dk[i]->Clone(dkname+"new"));
    P_dk[i]->SetDirectory(0);
    //    TString dg1name = TString::Format("p%i_lambda_dg1", i);
    //    TString dg1name = TString::Format("bin_content_lam_dg_%i_%ito%iGeV",i+1,bin_low,bin_high);
    TString dg1name = TString::Format("bin_content_lam_dg_%i",i+1);
    P_dg1[i] = dynamic_cast<TH2D *>(other.P_dg1[i]->Clone(dg1name+"new"));
    P_dg1[i]->SetDirectory(0);
  }
}

RooATGCFunction_wz::~RooATGCFunction_wz() {
  int const N_bins=20;
  std::cout << "7 N_bins= "<< N_bins << std::endl;
  for(int i = 0; i<N_bins; ++i) {
    if (P_dk[i])
      delete P_dk[i];
    if (P_dg1[i])
      delete P_dg1[i];
  }
  delete[] P_dk;
  delete[] P_dg1;
}

Double_t RooATGCFunction_wz::evaluate() const 
{ 
  // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 

  TH2D ** P = P_dg1;
  double v1(lZ), v2(dg1);
  if(TMath::Abs(dg1)<0.000001) {
    P = P_dk;
    v2 = dkg;
  }

  if (not P[0]) {
    TFile f(profileFilename);
    readProfiles(bins,f);
    f.Close();
  }

  if (v1 < P[0]->GetXaxis()->GetXmin())
    v1 = P[0]->GetXaxis()->GetXmin();
  if (v1 > P[0]->GetXaxis()->GetXmax())
    v1 = P[0]->GetXaxis()->GetXmax();
  if (v2 < P[0]->GetYaxis()->GetXmin())
    v2 = P[0]->GetYaxis()->GetXmin();
  if (v2 > P[0]->GetYaxis()->GetXmax())
    v2 = P[0]->GetYaxis()->GetXmax();
 
  double ret(0.);
  /*
  int const N_bins=15;
  int const bins_first=200.;
  int const bins_last=800.;
  double bin_width=(bins_last-bins_first)/N_bins;
  */

  int N_bins=bins.size()-1;
  std::cout << "8 N_bins= "<< N_bins << std::endl;

  /*
  for(int i = 0; i<N_bins; i++) {
    // std::cout << P_dk[i]->GetName() << '\n';
    ret += P[i]->Interpolate(v1, v2)*TMath::Power(x, i);
  }
  */
  for (int i = 0; i<N_bins; ++i) { 
    //    int bin_with_x=int((x-bins_first)/bin_width)+1;
    int bin_with_x=1;
    for (int j=0;j<N_bins;j++)
      if (x<bins[j+1] && x>bins[j]) bin_with_x=j+1;
    ret += P[bin_with_x-1]->Interpolate(v1, v2);
    cout <<" ------------> ATGCFunction: x= "<<x<<" bin= "<< bin_with_x<<" ret= "<<ret << endl;
  }
    cout <<"    ------------> ATGCFunction: ret= "<<ret << endl;
  /*
  for(int i = 0; i<= 6; i++) {
    // std::cout << P_dk[i]->GetName() << '\n';
    ret += P[i]->Interpolate(v1, v2)*TMath::Power(x, i);
  }
  */

  if (ret < 0.) ret = 0.;
  return ret; 
}
